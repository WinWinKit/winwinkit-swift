//
// OfferCodeReward.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OfferCodeReward: Codable, Hashable {

    /** The key of the reward */
    public private(set) var key: String
    /** The offer code id of the reward */
    public private(set) var offerCodeId: String
    /** The name of the reward */
    public private(set) var name: String
    /** The description of the reward */
    public private(set) var description: String?
    /** The metadata of the reward */
    public private(set) var metadata: AnyCodable?
    /** The created at of the reward */
    public private(set) var createdAt: Date
    /** The updated at of the reward */
    public private(set) var updatedAt: Date?

    public init(key: String, offerCodeId: String, name: String, description: String?, metadata: AnyCodable?, createdAt: Date, updatedAt: Date?) {
        self.key = key
        self.offerCodeId = offerCodeId
        self.name = name
        self.description = description
        self.metadata = metadata
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case key
        case offerCodeId = "offer_code_id"
        case name
        case description
        case metadata
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(key, forKey: .key)
        try container.encode(offerCodeId, forKey: .offerCodeId)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

