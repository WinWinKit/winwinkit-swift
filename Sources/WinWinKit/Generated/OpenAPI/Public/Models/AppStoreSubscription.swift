//
// AppStoreSubscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The subscription on the App Store */
public struct AppStoreSubscription: Codable, Hashable {

    public enum SubscriptionPeriod: String, Codable, CaseIterable {
        case oneWeek = "ONE_WEEK"
        case oneMonth = "ONE_MONTH"
        case twoMonths = "TWO_MONTHS"
        case threeMonths = "THREE_MONTHS"
        case sixMonths = "SIX_MONTHS"
        case oneYear = "ONE_YEAR"
    }
    /** The subscription id. */
    public private(set) var id: String
    /** The product id. */
    public private(set) var productId: String
    /** The subscription name. */
    public private(set) var name: String
    /** The subscription period. */
    public private(set) var subscriptionPeriod: SubscriptionPeriod
    /** The prices of the subscription. */
    public private(set) var prices: [AppStorePrice]

    public init(id: String, productId: String, name: String, subscriptionPeriod: SubscriptionPeriod, prices: [AppStorePrice]) {
        self.id = id
        self.productId = productId
        self.name = name
        self.subscriptionPeriod = subscriptionPeriod
        self.prices = prices
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case productId = "product_id"
        case name
        case subscriptionPeriod = "subscription_period"
        case prices
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(productId, forKey: .productId)
        try container.encode(name, forKey: .name)
        try container.encode(subscriptionPeriod, forKey: .subscriptionPeriod)
        try container.encode(prices, forKey: .prices)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension AppStoreSubscription: Identifiable {}
